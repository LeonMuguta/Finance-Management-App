{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tadiwa.muguta\\\\Desktop\\\\Projects\\\\Finance Management\\\\financial_management_app\\\\react-frontend\\\\src\\\\Components\\\\Revenues.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport axios from \"axios\";\nimport Sidebar from \"./Sidebar\";\nimport AddRevenueModal from \"./AddRevenueModal\";\nimport '../Styling/Revenues.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Revenues() {\n  _s();\n  const [revenues, setRevenues] = useState([]); // State to hold fetched revenue data\n  const [userId, setUserId] = useState(null); // State to hold logged-in user ID\n  const [isModalOpen, setIsModalOpen] = useState(false); // State to control modal visibility\n  const [selectedRevenues, setSelectedRevenues] = useState([]); // State to hold selected revenue IDs\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false); // State to control the success message visibility\n  const navigate = useNavigate(); // Hook for programmatic navigation\n\n  // Fetch user ID from localStorage when the component mounts\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('id'); // Assuming userId is stored in localStorage\n    if (storedUserId) {\n      setUserId(parseInt(storedUserId, 10)); // Convert userId to an integer\n    }\n  }, []);\n\n  // Fetch revenue data for the logged-in user when userId is available\n  useEffect(() => {\n    if (userId) {\n      const fetchRevenues = async () => {\n        try {\n          const response = await axios.get(`http://localhost:8080/revenues/user/${userId}`);\n          setRevenues(response.data); // Store user-specific revenue data in state\n        } catch (error) {\n          console.error('Error fetching revenues: ', error);\n        }\n      };\n      fetchRevenues();\n    }\n  }, [userId]); // Dependency on userId, fetch data once it's available\n\n  // Sort revenues by date in descending order (most recent first)\n  const sortedRevenues = [...revenues].sort((a, b) => new Date(b.date) - new Date(a.date));\n\n  // Function to handle adding revenue\n  const handleAddRevenue = async newRevenue => {\n    try {\n      const response = await axios.post('http://localhost:8080/revenues', {\n        ...newRevenue,\n        user: {\n          id: userId\n        } // Include user ID in the request\n      });\n      console.log(response.data); // Log the response (optional)\n      setRevenues(prevRevenues => [...prevRevenues, newRevenue]); // Update the state\n      navigate('/revenues');\n    } catch (error) {\n      if (error.response) {\n        throw error.response.data; // Return server validation error\n      } else {\n        // eslint-disable-next-line\n        throw 'An error occurred while creating revenue.';\n      }\n    }\n  };\n\n  // Handle checkbox toggle\n  const handleCheckboxChange = revenueId => {\n    setSelectedRevenues(prevSelected => {\n      console.log(prevSelected);\n      if (prevSelected.includes(revenueId)) {\n        // Remove the revenueId if already selected\n        return prevSelected.filter(id => id !== revenueId);\n      } else {\n        // Add the revenueId to the selected array\n        console.log(selectedRevenues);\n        return [...prevSelected, revenueId];\n      }\n    });\n  };\n\n  // Function to handle removing selected revenues\n  const handleRemoveSelected = async () => {\n    try {\n      // Loop through selected revenues and send a DELETE request for each\n      await Promise.all(selectedRevenues.map(async id => {\n        await axios.delete(`http://localhost:8080/revenues/${id}`);\n      }));\n      console.log(\"Successfully deleted the selected revenue transactions\");\n\n      // After successful deletion, update the state to remove the deleted revenues\n      setRevenues(prevRevenues => prevRevenues.filter(revenue => !selectedRevenues.includes(revenue.id)));\n      setSelectedRevenues([]); // Clear the selected revenues after deletion\n\n      // Show success message and auto-hide after 3 seconds\n      setShowSuccessMessage(true);\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n      }, 3000); // Hide message after 3 seconds\n    } catch (error) {\n      console.error('Error deleting revenues:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"revenuesContainer\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"revenuesContent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Revenues\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"revenuesTableContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"revenuesTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: sortedRevenues.length > 0 ? sortedRevenues.map(revenue => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: selectedRevenues.includes(revenue.id),\n                  onChange: () => handleCheckboxChange(revenue.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"R\", revenue.amount]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: revenue.category\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: revenue.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: new Date(revenue.date).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this)]\n            }, revenue.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"5\",\n                children: \"No revenues to display\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), showSuccessMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"successMessage\",\n        children: \"Successfully deleted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"revenueButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"addRevenueButton\",\n          onClick: () => setIsModalOpen(true),\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-plus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), \" Add revenue\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `removeRevenueButton ${selectedRevenues.length === 0 ? 'disabledButton' : ''}`,\n          disabled: selectedRevenues.length === 0 // Disable if no revenue is selected\n          ,\n          onClick: handleRemoveSelected // Call the remove function\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-trash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), \" Remove\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddRevenueModal, {\n        isOpen: isModalOpen,\n        onClose: () => setIsModalOpen(false),\n        onAddRevenue: handleAddRevenue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n_s(Revenues, \"p8ATriYTWSTtepF0oj6hSZX/Lrc=\", false, function () {\n  return [useNavigate];\n});\n_c = Revenues;\nexport default Revenues;\nvar _c;\n$RefreshReg$(_c, \"Revenues\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axios","Sidebar","AddRevenueModal","jsxDEV","_jsxDEV","Revenues","_s","revenues","setRevenues","userId","setUserId","isModalOpen","setIsModalOpen","selectedRevenues","setSelectedRevenues","showSuccessMessage","setShowSuccessMessage","navigate","storedUserId","localStorage","getItem","parseInt","fetchRevenues","response","get","data","error","console","sortedRevenues","sort","a","b","Date","date","handleAddRevenue","newRevenue","post","user","id","log","prevRevenues","handleCheckboxChange","revenueId","prevSelected","includes","filter","handleRemoveSelected","Promise","all","map","delete","revenue","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","type","checked","onChange","amount","category","description","toLocaleDateString","colSpan","onClick","disabled","isOpen","onClose","onAddRevenue","_c","$RefreshReg$"],"sources":["C:/Users/tadiwa.muguta/Desktop/Projects/Finance Management/financial_management_app/react-frontend/src/Components/Revenues.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport AddRevenueModal from \"./AddRevenueModal\";\r\nimport '../Styling/Revenues.css';\r\n\r\nfunction Revenues() {\r\n    const [revenues, setRevenues] = useState([]); // State to hold fetched revenue data\r\n    const [userId, setUserId] = useState(null); // State to hold logged-in user ID\r\n    const [isModalOpen, setIsModalOpen] = useState(false); // State to control modal visibility\r\n    const [selectedRevenues, setSelectedRevenues] = useState([]); // State to hold selected revenue IDs\r\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false); // State to control the success message visibility\r\n    const navigate = useNavigate(); // Hook for programmatic navigation\r\n\r\n    // Fetch user ID from localStorage when the component mounts\r\n    useEffect(() => {\r\n        const storedUserId = localStorage.getItem('id'); // Assuming userId is stored in localStorage\r\n        if (storedUserId) {\r\n            setUserId(parseInt(storedUserId, 10)); // Convert userId to an integer\r\n        }\r\n    }, []);\r\n\r\n    // Fetch revenue data for the logged-in user when userId is available\r\n    useEffect(() => {\r\n        if (userId) {\r\n            const fetchRevenues = async () => {\r\n                try {\r\n                    const response = await axios.get(`http://localhost:8080/revenues/user/${userId}`);\r\n                    setRevenues(response.data); // Store user-specific revenue data in state\r\n                } catch (error) {\r\n                    console.error('Error fetching revenues: ', error);\r\n                }\r\n            };\r\n\r\n            fetchRevenues();\r\n        }\r\n    }, [userId]); // Dependency on userId, fetch data once it's available\r\n\r\n    // Sort revenues by date in descending order (most recent first)\r\n    const sortedRevenues = [...revenues].sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n    // Function to handle adding revenue\r\n    const handleAddRevenue = async (newRevenue) => {\r\n        try {\r\n            const response = await axios.post('http://localhost:8080/revenues', {\r\n                ...newRevenue,\r\n                user: { id: userId } // Include user ID in the request\r\n            });\r\n            console.log(response.data); // Log the response (optional)\r\n            setRevenues((prevRevenues) => [...prevRevenues, newRevenue]); // Update the state\r\n            navigate('/revenues');\r\n        } catch (error) {\r\n            if (error.response) {\r\n                throw error.response.data;  // Return server validation error\r\n            } else {\r\n                // eslint-disable-next-line\r\n                throw 'An error occurred while creating revenue.';\r\n            }            \r\n        }\r\n    };\r\n\r\n    // Handle checkbox toggle\r\n    const handleCheckboxChange = (revenueId) => {\r\n        setSelectedRevenues((prevSelected) => {\r\n            console.log(prevSelected);\r\n            if (prevSelected.includes(revenueId)) {\r\n                // Remove the revenueId if already selected\r\n                return prevSelected.filter(id => id !== revenueId);\r\n            } else {\r\n                // Add the revenueId to the selected array\r\n                console.log(selectedRevenues);\r\n                return [...prevSelected, revenueId];\r\n            }\r\n        });\r\n    };\r\n\r\n    // Function to handle removing selected revenues\r\n    const handleRemoveSelected = async () => {\r\n        try {\r\n            // Loop through selected revenues and send a DELETE request for each\r\n            await Promise.all(\r\n                selectedRevenues.map(async (id) => {\r\n                    await axios.delete(`http://localhost:8080/revenues/${id}`);\r\n                })\r\n            );\r\n\r\n            console.log(\"Successfully deleted the selected revenue transactions\");\r\n\r\n            // After successful deletion, update the state to remove the deleted revenues\r\n            setRevenues((prevRevenues) =>\r\n                prevRevenues.filter((revenue) => !selectedRevenues.includes(revenue.id))\r\n            );\r\n            setSelectedRevenues([]); // Clear the selected revenues after deletion\r\n\r\n            // Show success message and auto-hide after 3 seconds\r\n            setShowSuccessMessage(true);\r\n            setTimeout(() => {\r\n                setShowSuccessMessage(false);\r\n            }, 3000); // Hide message after 3 seconds\r\n\r\n        } catch (error) {\r\n            console.error('Error deleting revenues:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"revenuesContainer\">\r\n            {/* Use Sidebar component */}\r\n            <Sidebar />\r\n\r\n            {/* Right Content Area */}\r\n            <div className=\"revenuesContent\">\r\n                <h2>Revenues</h2>\r\n                \r\n                {/* Revenue Table Section */}\r\n                <div className=\"revenuesTableContainer\">\r\n                    <table className=\"revenuesTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Select</th>\r\n                                <th>Amount</th>\r\n                                <th>Category</th>\r\n                                <th>Description</th>\r\n                                <th>Date</th>\r\n                                {/* <th>User</th> */}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {sortedRevenues.length > 0 ? (\r\n                                sortedRevenues.map((revenue) => (\r\n                                    <tr key={revenue.id}>\r\n                                        <td>\r\n                                            <input \r\n                                                type=\"checkbox\" \r\n                                                checked={selectedRevenues.includes(revenue.id)} \r\n                                                onChange={() => handleCheckboxChange(revenue.id)} \r\n                                            />\r\n                                        </td>\r\n                                        <td>R{revenue.amount}</td>\r\n                                        <td>{revenue.category}</td>\r\n                                        <td>{revenue.description}</td>\r\n                                        <td>{new Date(revenue.date).toLocaleDateString()}</td>\r\n                                        {/* <td>{revenue.user.firstName} {revenue.user.surname}</td> */}\r\n                                    </tr>\r\n                                ))\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colSpan=\"5\">No revenues to display</td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* Success message */}\r\n                {showSuccessMessage && (\r\n                    <div className=\"successMessage\">\r\n                        Successfully deleted\r\n                    </div>\r\n                )}\r\n\r\n                {/* Buttons Section */}\r\n                <div className=\"revenueButtons\">\r\n                    <button className=\"addRevenueButton\" onClick={() => setIsModalOpen(true)}>\r\n                        <i className=\"fa fa-plus\"></i> Add revenue\r\n                    </button>\r\n                    <button \r\n                        className={`removeRevenueButton ${selectedRevenues.length === 0 ? 'disabledButton' : ''}`} \r\n                        disabled={selectedRevenues.length === 0} // Disable if no revenue is selected\r\n                        onClick={handleRemoveSelected} // Call the remove function\r\n                    >\r\n                        <i className=\"fa fa-trash\"></i> Remove\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Add Revenue Modal */}\r\n                <AddRevenueModal \r\n                    isOpen={isModalOpen} \r\n                    onClose={() => setIsModalOpen(false)} \r\n                    onAddRevenue={handleAddRevenue} \r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Revenues;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}