{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tadiwa.muguta\\\\Desktop\\\\Projects\\\\Finance Management\\\\financial_management_app\\\\react-frontend\\\\src\\\\Components\\\\Revenues.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Sidebar from \"./Sidebar\";\nimport TopNav from \"./TopNav\";\nimport AddRevenueModal from \"./AddRevenueModal\";\nimport '../Styling/Revenues.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Revenues() {\n  _s();\n  const [revenues, setRevenues] = useState([]); // State to hold fetched revenue data\n  const [userId, setUserId] = useState(null); // State to hold logged-in user ID\n  const [isModalOpen, setIsModalOpen] = useState(false); // State to control modal visibility\n  const [selectedRevenues, setSelectedRevenues] = useState([]); // State to hold selected revenue IDs\n  const [editingRevenue, setEditingRevenue] = useState(null); // State to hold revenue data for editing\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false); // State to control the success message visibility\n  const [windowWidth, setWindowWidth] = React.useState(window.innerWidth);\n  const [expandedMonths, setExpandedMonths] = useState({}); // Track expanded/collapsed months\n\n  // Fetch user ID from localStorage when the component mounts\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('id'); // Assuming userId is stored in localStorage\n    if (storedUserId) {\n      setUserId(parseInt(storedUserId, 10)); // Convert userId to an integer\n    }\n  }, []);\n\n  // Fetch revenue data for the logged-in user when userId is available\n  useEffect(() => {\n    if (userId) {\n      const fetchRevenues = async () => {\n        try {\n          const response = await axios.get(`http://localhost:8080/revenues/user/${userId}`);\n          setRevenues(response.data); // Store user-specific revenue data in state\n        } catch (error) {\n          console.error('Error fetching revenues: ', error);\n        }\n      };\n      fetchRevenues();\n    }\n  }, [userId]); // Dependency on userId, fetch data once it's available\n\n  // Sort revenues by date in descending order (most recent first)\n  const sortedRevenues = [...revenues].sort((a, b) => new Date(b.date) - new Date(a.date));\n\n  // Group revenues by month and year\n  const groupedRevenues = sortedRevenues.reduce((groups, revenue) => {\n    const date = new Date(revenue.date);\n    const monthYear = `${date.toLocaleString('default', {\n      month: 'long'\n    })} ${date.getFullYear()}`;\n    if (!groups[monthYear]) {\n      groups[monthYear] = [];\n    }\n    groups[monthYear].push(revenue);\n    return groups;\n  }, {});\n\n  // Handle expanding/collapsing month sections\n  const toggleMonth = monthYear => {\n    setExpandedMonths(prevState => ({\n      ...prevState,\n      [monthYear]: !prevState[monthYear]\n    }));\n  };\n\n  // Function to handle adding revenue\n  const handleAddRevenue = async newRevenue => {\n    try {\n      const response = await axios.post('http://localhost:8080/revenues', {\n        ...newRevenue,\n        user: {\n          id: userId\n        } // Include user ID in the request\n      });\n      console.log(response.data);\n      setRevenues(prevRevenues => [...prevRevenues, newRevenue]); // Update the state\n    } catch (error) {\n      if (error.response) {\n        throw error.response.data; // Return server validation error\n      } else {\n        // eslint-disable-next-line\n        throw 'An error occurred while creating revenue.';\n      }\n    }\n  };\n\n  // Handle edit revenue\n  const handleEditRevenue = async editedRevenue => {\n    try {\n      const response = await axios.put(`http://localhost:8080/revenues/${editingRevenue.id}`, {\n        ...editedRevenue,\n        user: {\n          id: userId\n        }\n      });\n      // Update the state with the updated revenue\n      setRevenues(prevRevenues => prevRevenues.map(rev => rev.id === editingRevenue.id ? response.data : rev));\n      setEditingRevenue(null); // Reset editing revenue\n    } catch (error) {\n      console.error('Error updating revenue: ', error);\n    }\n  };\n\n  // Handle checkbox toggle\n  const handleCheckboxChange = revenueId => {\n    setSelectedRevenues(prevSelected => {\n      if (prevSelected.includes(revenueId)) {\n        // Remove the revenueId if already selected\n        return prevSelected.filter(id => id !== revenueId);\n      } else {\n        // Add the revenueId to the selected array\n        return [...prevSelected, revenueId];\n      }\n    });\n  };\n\n  // Open the modal to add new revenue (ensure fields are reset)\n  const handleAddClick = () => {\n    setEditingRevenue(null); // Reset editingRevenue to ensure the form is empty\n    setIsModalOpen(true); // Open the modal\n  };\n\n  // Open the modal to edit the selected revenue\n  const handleEditClick = () => {\n    const revenueToEdit = revenues.find(revenue => revenue.id === selectedRevenues[0]);\n    setEditingRevenue(revenueToEdit); // Set the revenue to be edited\n    setIsModalOpen(true); // Open the modal\n  };\n\n  // Function to handle removing selected revenues\n  const handleRemoveSelected = async () => {\n    try {\n      // Loop through selected revenues and send a DELETE request for each\n      await Promise.all(selectedRevenues.map(async id => {\n        await axios.delete(`http://localhost:8080/revenues/${id}`);\n      }));\n      console.log(\"Successfully deleted the selected revenue transactions\");\n\n      // After successful deletion, update the state to remove the deleted revenues\n      setRevenues(prevRevenues => prevRevenues.filter(revenue => !selectedRevenues.includes(revenue.id)));\n      setSelectedRevenues([]); // Clear the selected revenues after deletion\n\n      // Show success message and auto-hide after 3 seconds\n      setShowSuccessMessage(true);\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n      }, 3000); // Hide message after 3 seconds\n    } catch (error) {\n      console.error('Error deleting revenues:', error);\n    }\n  };\n\n  // Modify the onClose function to unselect the selected revenue\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingRevenue(null);\n    setSelectedRevenues([]); // Unselect any selected revenues\n  };\n  React.useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"revenuesContainer\",\n    children: [windowWidth > 650 ? /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 34\n    }, this) : /*#__PURE__*/_jsxDEV(TopNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 48\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"revenuesContent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Revenues\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), Object.keys(groupedRevenues).map(monthYear => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"monthSection\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"monthHeader\",\n          onClick: () => toggleMonth(monthYear),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: monthYear\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: expandedMonths[monthYear] ? 'Collapse' : 'Expand'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), expandedMonths[monthYear] && /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"revenuesTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Recurring\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: groupedRevenues[monthYear].map(revenue => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: selectedRevenues.includes(revenue.id) ? 'selectedRow' : '',\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: selectedRevenues.includes(revenue.id),\n                  onChange: () => handleCheckboxChange(revenue.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"R\", revenue.amount]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: revenue.category\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: revenue.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: revenue.isRecurring ? 'Yes' : 'No'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: new Date(revenue.date).toLocaleDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 45\n              }, this)]\n            }, revenue.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }, this)]\n      }, monthYear, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this)), showSuccessMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"successMessage\",\n        children: \"Successfully deleted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"revenueButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"addRevenueButton\",\n          onClick: handleAddClick,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-plus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 25\n          }, this), \" Add\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `removeRevenueButton ${selectedRevenues.length === 0 ? 'disabledButton' : ''}`,\n          disabled: selectedRevenues.length === 0 // Disable if no revenue is selected\n          ,\n          onClick: handleRemoveSelected // Call the remove function\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-trash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this), \" Remove\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `editRevenueButton ${selectedRevenues.length !== 1 ? 'disabledButton' : ''}`,\n          disabled: selectedRevenues.length !== 1 // Disable if no revenue is selected\n          ,\n          onClick: handleEditClick // Display the edit form once button is clicked\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-pencil\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), \" Edit\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddRevenueModal, {\n        isOpen: isModalOpen,\n        onClose: handleCloseModal,\n        onAddRevenue: editingRevenue ? handleEditRevenue : handleAddRevenue,\n        editingRevenue: editingRevenue // Pass selected revenue for editing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n}\n_s(Revenues, \"DQLtti7b9duD6h4KIQPE4zIejVk=\");\n_c = Revenues;\nexport default Revenues;\nvar _c;\n$RefreshReg$(_c, \"Revenues\");","map":{"version":3,"names":["React","useEffect","useState","axios","Sidebar","TopNav","AddRevenueModal","jsxDEV","_jsxDEV","Revenues","_s","revenues","setRevenues","userId","setUserId","isModalOpen","setIsModalOpen","selectedRevenues","setSelectedRevenues","editingRevenue","setEditingRevenue","showSuccessMessage","setShowSuccessMessage","windowWidth","setWindowWidth","window","innerWidth","expandedMonths","setExpandedMonths","storedUserId","localStorage","getItem","parseInt","fetchRevenues","response","get","data","error","console","sortedRevenues","sort","a","b","Date","date","groupedRevenues","reduce","groups","revenue","monthYear","toLocaleString","month","getFullYear","push","toggleMonth","prevState","handleAddRevenue","newRevenue","post","user","id","log","prevRevenues","handleEditRevenue","editedRevenue","put","map","rev","handleCheckboxChange","revenueId","prevSelected","includes","filter","handleAddClick","handleEditClick","revenueToEdit","find","handleRemoveSelected","Promise","all","delete","setTimeout","handleCloseModal","handleResize","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","onClick","type","checked","onChange","amount","category","description","isRecurring","toLocaleDateString","length","disabled","isOpen","onClose","onAddRevenue","_c","$RefreshReg$"],"sources":["C:/Users/tadiwa.muguta/Desktop/Projects/Finance Management/financial_management_app/react-frontend/src/Components/Revenues.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport TopNav from \"./TopNav\";\r\nimport AddRevenueModal from \"./AddRevenueModal\";\r\nimport '../Styling/Revenues.css';\r\n\r\nfunction Revenues() {\r\n    const [revenues, setRevenues] = useState([]); // State to hold fetched revenue data\r\n    const [userId, setUserId] = useState(null); // State to hold logged-in user ID\r\n    const [isModalOpen, setIsModalOpen] = useState(false); // State to control modal visibility\r\n    const [selectedRevenues, setSelectedRevenues] = useState([]); // State to hold selected revenue IDs\r\n    const [editingRevenue, setEditingRevenue] = useState(null); // State to hold revenue data for editing\r\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false); // State to control the success message visibility\r\n    const [windowWidth, setWindowWidth] = React.useState(window.innerWidth);\r\n    const [expandedMonths, setExpandedMonths] = useState({}); // Track expanded/collapsed months\r\n\r\n    // Fetch user ID from localStorage when the component mounts\r\n    useEffect(() => {\r\n        const storedUserId = localStorage.getItem('id'); // Assuming userId is stored in localStorage\r\n        if (storedUserId) {\r\n            setUserId(parseInt(storedUserId, 10)); // Convert userId to an integer\r\n        }\r\n    }, []);\r\n\r\n    // Fetch revenue data for the logged-in user when userId is available\r\n    useEffect(() => {\r\n        if (userId) {\r\n            const fetchRevenues = async () => {\r\n                try {\r\n                    const response = await axios.get(`http://localhost:8080/revenues/user/${userId}`);\r\n                    setRevenues(response.data); // Store user-specific revenue data in state\r\n                } catch (error) {\r\n                    console.error('Error fetching revenues: ', error);\r\n                }\r\n            };\r\n\r\n            fetchRevenues();\r\n        }\r\n    }, [userId]); // Dependency on userId, fetch data once it's available\r\n\r\n    // Sort revenues by date in descending order (most recent first)\r\n    const sortedRevenues = [...revenues].sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n    // Group revenues by month and year\r\n    const groupedRevenues = sortedRevenues.reduce((groups, revenue) => {\r\n        const date = new Date(revenue.date);\r\n        const monthYear = `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`;\r\n        if (!groups[monthYear]) {\r\n            groups[monthYear] = [];\r\n        }\r\n        groups[monthYear].push(revenue);\r\n        return groups;\r\n    }, {});\r\n\r\n    // Handle expanding/collapsing month sections\r\n    const toggleMonth = (monthYear) => {\r\n        setExpandedMonths((prevState) => ({\r\n            ...prevState,\r\n            [monthYear]: !prevState[monthYear],\r\n        }));\r\n    };\r\n\r\n    // Function to handle adding revenue\r\n    const handleAddRevenue = async (newRevenue) => {\r\n        try {\r\n            const response = await axios.post('http://localhost:8080/revenues', {\r\n                ...newRevenue,\r\n                user: { id: userId } // Include user ID in the request\r\n            });\r\n            console.log(response.data);\r\n            setRevenues((prevRevenues) => [...prevRevenues, newRevenue]); // Update the state\r\n        } catch (error) {\r\n            if (error.response) {\r\n                throw error.response.data;  // Return server validation error\r\n            } else {\r\n                // eslint-disable-next-line\r\n                throw 'An error occurred while creating revenue.';\r\n            }            \r\n        }\r\n    };\r\n\r\n    // Handle edit revenue\r\n    const handleEditRevenue = async (editedRevenue) => {\r\n        try {\r\n            const response = await axios.put(`http://localhost:8080/revenues/${editingRevenue.id}`, {\r\n                ...editedRevenue,\r\n                user: { id: userId }\r\n            });\r\n            // Update the state with the updated revenue\r\n            setRevenues((prevRevenues) => \r\n                prevRevenues.map(rev => rev.id === editingRevenue.id ? response.data : rev)\r\n            );\r\n            setEditingRevenue(null); // Reset editing revenue\r\n        } catch (error) {\r\n            console.error('Error updating revenue: ', error);\r\n        }\r\n    };\r\n\r\n    // Handle checkbox toggle\r\n    const handleCheckboxChange = (revenueId) => {\r\n        setSelectedRevenues((prevSelected) => {\r\n            if (prevSelected.includes(revenueId)) {\r\n                // Remove the revenueId if already selected\r\n                return prevSelected.filter(id => id !== revenueId);\r\n            } else {\r\n                // Add the revenueId to the selected array\r\n                return [...prevSelected, revenueId];\r\n            }\r\n        });\r\n    };\r\n\r\n    // Open the modal to add new revenue (ensure fields are reset)\r\n    const handleAddClick = () => {\r\n        setEditingRevenue(null); // Reset editingRevenue to ensure the form is empty\r\n        setIsModalOpen(true); // Open the modal\r\n    };\r\n\r\n    // Open the modal to edit the selected revenue\r\n    const handleEditClick = () => {\r\n        const revenueToEdit = revenues.find(revenue => revenue.id === selectedRevenues[0]);\r\n        setEditingRevenue(revenueToEdit); // Set the revenue to be edited\r\n        setIsModalOpen(true); // Open the modal\r\n    };\r\n\r\n    // Function to handle removing selected revenues\r\n    const handleRemoveSelected = async () => {\r\n        try {\r\n            // Loop through selected revenues and send a DELETE request for each\r\n            await Promise.all(\r\n                selectedRevenues.map(async (id) => {\r\n                    await axios.delete(`http://localhost:8080/revenues/${id}`);\r\n                })\r\n            );\r\n\r\n            console.log(\"Successfully deleted the selected revenue transactions\");\r\n\r\n            // After successful deletion, update the state to remove the deleted revenues\r\n            setRevenues((prevRevenues) =>\r\n                prevRevenues.filter((revenue) => !selectedRevenues.includes(revenue.id))\r\n            );\r\n            setSelectedRevenues([]); // Clear the selected revenues after deletion\r\n\r\n            // Show success message and auto-hide after 3 seconds\r\n            setShowSuccessMessage(true);\r\n            setTimeout(() => {\r\n                setShowSuccessMessage(false);\r\n            }, 3000); // Hide message after 3 seconds\r\n\r\n        } catch (error) {\r\n            console.error('Error deleting revenues:', error);\r\n        }\r\n    };\r\n\r\n    // Modify the onClose function to unselect the selected revenue\r\n    const handleCloseModal = () => {\r\n        setIsModalOpen(false);\r\n        setEditingRevenue(null);\r\n        setSelectedRevenues([]); // Unselect any selected revenues\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowWidth(window.innerWidth);\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"revenuesContainer\">\r\n            {/* Conditional rendering of Sidebar or TopNav */}\r\n            {windowWidth > 650 ? <Sidebar /> : <TopNav />}\r\n\r\n            {/* Right Content Area */}\r\n            <div className=\"revenuesContent\">\r\n                <h2>Revenues</h2>\r\n                \r\n                {/* Loop through grouped revenues by month */}\r\n                {Object.keys(groupedRevenues).map((monthYear) => (\r\n                    <div key={monthYear} className=\"monthSection\">\r\n                        {/* Collapsible header */}\r\n                        <div className=\"monthHeader\" onClick={() => toggleMonth(monthYear)}>\r\n                            <h3>{monthYear}</h3>\r\n                            <button>\r\n                                {expandedMonths[monthYear] ? 'Collapse' : 'Expand'}\r\n                            </button>\r\n                        </div>\r\n\r\n                        {/* Collapsible content */}\r\n                        {expandedMonths[monthYear] && (\r\n                            <table className=\"revenuesTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Select</th>\r\n                                        <th>Amount</th>\r\n                                        <th>Category</th>\r\n                                        <th>Description</th>\r\n                                        <th>Recurring</th>\r\n                                        <th>Date</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {groupedRevenues[monthYear].map((revenue) => (\r\n                                        <tr key={revenue.id} className={selectedRevenues.includes(revenue.id) ? 'selectedRow' : ''}>\r\n                                            <td>\r\n                                                <input \r\n                                                    type=\"checkbox\" \r\n                                                    checked={selectedRevenues.includes(revenue.id)} \r\n                                                    onChange={() => handleCheckboxChange(revenue.id)} \r\n                                                />\r\n                                            </td>\r\n                                            <td>R{revenue.amount}</td>\r\n                                            <td>{revenue.category}</td>\r\n                                            <td>{revenue.description}</td>\r\n                                            <td>{revenue.isRecurring ? 'Yes' : 'No'}</td>\r\n                                            <td>{new Date(revenue.date).toLocaleDateString()}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n\r\n                {/* Success message */}\r\n                {showSuccessMessage && (\r\n                    <div className=\"successMessage\">\r\n                        Successfully deleted\r\n                    </div>\r\n                )}\r\n\r\n                {/* Buttons Section */}\r\n                <div className=\"revenueButtons\">\r\n                    <button className=\"addRevenueButton\" onClick={handleAddClick}>\r\n                        <i className=\"fa fa-plus\"></i> Add\r\n                    </button>\r\n                    <button \r\n                        className={`removeRevenueButton ${selectedRevenues.length === 0 ? 'disabledButton' : ''}`} \r\n                        disabled={selectedRevenues.length === 0} // Disable if no revenue is selected\r\n                        onClick={handleRemoveSelected} // Call the remove function\r\n                    >\r\n                        <i className=\"fa fa-trash\"></i> Remove\r\n                    </button>\r\n                    <button \r\n                        className={`editRevenueButton ${selectedRevenues.length !== 1 ? 'disabledButton' : ''}`} \r\n                        disabled={selectedRevenues.length !== 1} // Disable if no revenue is selected\r\n                        onClick={handleEditClick} // Display the edit form once button is clicked\r\n                    >\r\n                        <i className=\"fa fa-pencil\"></i> Edit\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Add Revenue Modal */}\r\n                <AddRevenueModal \r\n                    isOpen={isModalOpen} \r\n                    onClose={handleCloseModal} \r\n                    onAddRevenue={editingRevenue ? handleEditRevenue : handleAddRevenue}\r\n                    editingRevenue={editingRevenue} // Pass selected revenue for editing\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Revenues;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAM,CAACe,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACmB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrE,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,KAAK,CAACE,QAAQ,CAACuB,MAAM,CAACC,UAAU,CAAC;EACvE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE1D;EACAD,SAAS,CAAC,MAAM;IACZ,MAAM4B,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,IAAIF,YAAY,EAAE;MACdf,SAAS,CAACkB,QAAQ,CAACH,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3C;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA5B,SAAS,CAAC,MAAM;IACZ,IAAIY,MAAM,EAAE;MACR,MAAMoB,aAAa,GAAG,MAAAA,CAAA,KAAY;QAC9B,IAAI;UACA,MAAMC,QAAQ,GAAG,MAAM/B,KAAK,CAACgC,GAAG,CAAC,uCAAuCtB,MAAM,EAAE,CAAC;UACjFD,WAAW,CAACsB,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACrD;MACJ,CAAC;MAEDJ,aAAa,CAAC,CAAC;IACnB;EACJ,CAAC,EAAE,CAACpB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd;EACA,MAAM0B,cAAc,GAAG,CAAC,GAAG5B,QAAQ,CAAC,CAAC6B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC,CAAC;;EAExF;EACA,MAAMC,eAAe,GAAGN,cAAc,CAACO,MAAM,CAAC,CAACC,MAAM,EAAEC,OAAO,KAAK;IAC/D,MAAMJ,IAAI,GAAG,IAAID,IAAI,CAACK,OAAO,CAACJ,IAAI,CAAC;IACnC,MAAMK,SAAS,GAAG,GAAGL,IAAI,CAACM,cAAc,CAAC,SAAS,EAAE;MAAEC,KAAK,EAAE;IAAO,CAAC,CAAC,IAAIP,IAAI,CAACQ,WAAW,CAAC,CAAC,EAAE;IAC9F,IAAI,CAACL,MAAM,CAACE,SAAS,CAAC,EAAE;MACpBF,MAAM,CAACE,SAAS,CAAC,GAAG,EAAE;IAC1B;IACAF,MAAM,CAACE,SAAS,CAAC,CAACI,IAAI,CAACL,OAAO,CAAC;IAC/B,OAAOD,MAAM;EACjB,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEN;EACA,MAAMO,WAAW,GAAIL,SAAS,IAAK;IAC/BrB,iBAAiB,CAAE2B,SAAS,KAAM;MAC9B,GAAGA,SAAS;MACZ,CAACN,SAAS,GAAG,CAACM,SAAS,CAACN,SAAS;IACrC,CAAC,CAAC,CAAC;EACP,CAAC;;EAED;EACA,MAAMO,gBAAgB,GAAG,MAAOC,UAAU,IAAK;IAC3C,IAAI;MACA,MAAMvB,QAAQ,GAAG,MAAM/B,KAAK,CAACuD,IAAI,CAAC,gCAAgC,EAAE;QAChE,GAAGD,UAAU;QACbE,IAAI,EAAE;UAAEC,EAAE,EAAE/C;QAAO,CAAC,CAAC;MACzB,CAAC,CAAC;MACFyB,OAAO,CAACuB,GAAG,CAAC3B,QAAQ,CAACE,IAAI,CAAC;MAC1BxB,WAAW,CAAEkD,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEL,UAAU,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACZ,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAChB,MAAMG,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC,CAAE;MAChC,CAAC,MAAM;QACH;QACA,MAAM,2CAA2C;MACrD;IACJ;EACJ,CAAC;;EAED;EACA,MAAM2B,iBAAiB,GAAG,MAAOC,aAAa,IAAK;IAC/C,IAAI;MACA,MAAM9B,QAAQ,GAAG,MAAM/B,KAAK,CAAC8D,GAAG,CAAC,kCAAkC9C,cAAc,CAACyC,EAAE,EAAE,EAAE;QACpF,GAAGI,aAAa;QAChBL,IAAI,EAAE;UAAEC,EAAE,EAAE/C;QAAO;MACvB,CAAC,CAAC;MACF;MACAD,WAAW,CAAEkD,YAAY,IACrBA,YAAY,CAACI,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACP,EAAE,KAAKzC,cAAc,CAACyC,EAAE,GAAG1B,QAAQ,CAACE,IAAI,GAAG+B,GAAG,CAC9E,CAAC;MACD/C,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;;EAED;EACA,MAAM+B,oBAAoB,GAAIC,SAAS,IAAK;IACxCnD,mBAAmB,CAAEoD,YAAY,IAAK;MAClC,IAAIA,YAAY,CAACC,QAAQ,CAACF,SAAS,CAAC,EAAE;QAClC;QACA,OAAOC,YAAY,CAACE,MAAM,CAACZ,EAAE,IAAIA,EAAE,KAAKS,SAAS,CAAC;MACtD,CAAC,MAAM;QACH;QACA,OAAO,CAAC,GAAGC,YAAY,EAAED,SAAS,CAAC;MACvC;IACJ,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMI,cAAc,GAAGA,CAAA,KAAM;IACzBrD,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;IACzBJ,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAM0D,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,aAAa,GAAGhE,QAAQ,CAACiE,IAAI,CAAC5B,OAAO,IAAIA,OAAO,CAACY,EAAE,KAAK3C,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAClFG,iBAAiB,CAACuD,aAAa,CAAC,CAAC,CAAC;IAClC3D,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAM6D,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACA;MACA,MAAMC,OAAO,CAACC,GAAG,CACb9D,gBAAgB,CAACiD,GAAG,CAAC,MAAON,EAAE,IAAK;QAC/B,MAAMzD,KAAK,CAAC6E,MAAM,CAAC,kCAAkCpB,EAAE,EAAE,CAAC;MAC9D,CAAC,CACL,CAAC;MAEDtB,OAAO,CAACuB,GAAG,CAAC,wDAAwD,CAAC;;MAErE;MACAjD,WAAW,CAAEkD,YAAY,IACrBA,YAAY,CAACU,MAAM,CAAExB,OAAO,IAAK,CAAC/B,gBAAgB,CAACsD,QAAQ,CAACvB,OAAO,CAACY,EAAE,CAAC,CAC3E,CAAC;MACD1C,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEzB;MACAI,qBAAqB,CAAC,IAAI,CAAC;MAC3B2D,UAAU,CAAC,MAAM;QACb3D,qBAAqB,CAAC,KAAK,CAAC;MAChC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAEd,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;;EAED;EACA,MAAM6C,gBAAgB,GAAGA,CAAA,KAAM;IAC3BlE,cAAc,CAAC,KAAK,CAAC;IACrBI,iBAAiB,CAAC,IAAI,CAAC;IACvBF,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;EAC7B,CAAC;EAEDlB,KAAK,CAACC,SAAS,CAAC,MAAM;IAClB,MAAMkF,YAAY,GAAGA,CAAA,KAAM;MACvB3D,cAAc,CAACC,MAAM,CAACC,UAAU,CAAC;IACrC,CAAC;IAEDD,MAAM,CAAC2D,gBAAgB,CAAC,QAAQ,EAAED,YAAY,CAAC;IAC/C,OAAO,MAAM1D,MAAM,CAAC4D,mBAAmB,CAAC,QAAQ,EAAEF,YAAY,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI3E,OAAA;IAAK8E,SAAS,EAAC,mBAAmB;IAAAC,QAAA,GAE7BhE,WAAW,GAAG,GAAG,gBAAGf,OAAA,CAACJ,OAAO;MAAAoF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGnF,OAAA,CAACH,MAAM;MAAAmF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG7CnF,OAAA;MAAK8E,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5B/E,OAAA;QAAA+E,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAGhBC,MAAM,CAACC,IAAI,CAAChD,eAAe,CAAC,CAACqB,GAAG,CAAEjB,SAAS,iBACxCzC,OAAA;QAAqB8E,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAEzC/E,OAAA;UAAK8E,SAAS,EAAC,aAAa;UAACQ,OAAO,EAAEA,CAAA,KAAMxC,WAAW,CAACL,SAAS,CAAE;UAAAsC,QAAA,gBAC/D/E,OAAA;YAAA+E,QAAA,EAAKtC;UAAS;YAAAuC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpBnF,OAAA;YAAA+E,QAAA,EACK5D,cAAc,CAACsB,SAAS,CAAC,GAAG,UAAU,GAAG;UAAQ;YAAAuC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC,EAGLhE,cAAc,CAACsB,SAAS,CAAC,iBACtBzC,OAAA;UAAO8E,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5B/E,OAAA;YAAA+E,QAAA,eACI/E,OAAA;cAAA+E,QAAA,gBACI/E,OAAA;gBAAA+E,QAAA,EAAI;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACfnF,OAAA;gBAAA+E,QAAA,EAAI;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACfnF,OAAA;gBAAA+E,QAAA,EAAI;cAAQ;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACjBnF,OAAA;gBAAA+E,QAAA,EAAI;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACpBnF,OAAA;gBAAA+E,QAAA,EAAI;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAClBnF,OAAA;gBAAA+E,QAAA,EAAI;cAAI;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACb;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACRnF,OAAA;YAAA+E,QAAA,EACK1C,eAAe,CAACI,SAAS,CAAC,CAACiB,GAAG,CAAElB,OAAO,iBACpCxC,OAAA;cAAqB8E,SAAS,EAAErE,gBAAgB,CAACsD,QAAQ,CAACvB,OAAO,CAACY,EAAE,CAAC,GAAG,aAAa,GAAG,EAAG;cAAA2B,QAAA,gBACvF/E,OAAA;gBAAA+E,QAAA,eACI/E,OAAA;kBACIuF,IAAI,EAAC,UAAU;kBACfC,OAAO,EAAE/E,gBAAgB,CAACsD,QAAQ,CAACvB,OAAO,CAACY,EAAE,CAAE;kBAC/CqC,QAAQ,EAAEA,CAAA,KAAM7B,oBAAoB,CAACpB,OAAO,CAACY,EAAE;gBAAE;kBAAA4B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACpD;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACF,CAAC,eACLnF,OAAA;gBAAA+E,QAAA,GAAI,GAAC,EAACvC,OAAO,CAACkD,MAAM;cAAA;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC1BnF,OAAA;gBAAA+E,QAAA,EAAKvC,OAAO,CAACmD;cAAQ;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC3BnF,OAAA;gBAAA+E,QAAA,EAAKvC,OAAO,CAACoD;cAAW;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9BnF,OAAA;gBAAA+E,QAAA,EAAKvC,OAAO,CAACqD,WAAW,GAAG,KAAK,GAAG;cAAI;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7CnF,OAAA;gBAAA+E,QAAA,EAAK,IAAI5C,IAAI,CAACK,OAAO,CAACJ,IAAI,CAAC,CAAC0D,kBAAkB,CAAC;cAAC;gBAAAd,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAZjD3C,OAAO,CAACY,EAAE;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAaf,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CACV;MAAA,GAzCK1C,SAAS;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA0Cd,CACR,CAAC,EAGDtE,kBAAkB,iBACfb,OAAA;QAAK8E,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAEhC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACR,eAGDnF,OAAA;QAAK8E,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3B/E,OAAA;UAAQ8E,SAAS,EAAC,kBAAkB;UAACQ,OAAO,EAAErB,cAAe;UAAAc,QAAA,gBACzD/E,OAAA;YAAG8E,SAAS,EAAC;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,QAClC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTnF,OAAA;UACI8E,SAAS,EAAE,uBAAuBrE,gBAAgB,CAACsF,MAAM,KAAK,CAAC,GAAG,gBAAgB,GAAG,EAAE,EAAG;UAC1FC,QAAQ,EAAEvF,gBAAgB,CAACsF,MAAM,KAAK,CAAE,CAAC;UAAA;UACzCT,OAAO,EAAEjB,oBAAqB,CAAC;UAAA;UAAAU,QAAA,gBAE/B/E,OAAA;YAAG8E,SAAS,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,WACnC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTnF,OAAA;UACI8E,SAAS,EAAE,qBAAqBrE,gBAAgB,CAACsF,MAAM,KAAK,CAAC,GAAG,gBAAgB,GAAG,EAAE,EAAG;UACxFC,QAAQ,EAAEvF,gBAAgB,CAACsF,MAAM,KAAK,CAAE,CAAC;UAAA;UACzCT,OAAO,EAAEpB,eAAgB,CAAC;UAAA;UAAAa,QAAA,gBAE1B/E,OAAA;YAAG8E,SAAS,EAAC;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,SACpC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eAGNnF,OAAA,CAACF,eAAe;QACZmG,MAAM,EAAE1F,WAAY;QACpB2F,OAAO,EAAExB,gBAAiB;QAC1ByB,YAAY,EAAExF,cAAc,GAAG4C,iBAAiB,GAAGP,gBAAiB;QACpErC,cAAc,EAAEA,cAAe,CAAC;MAAA;QAAAqE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACjF,EAAA,CAjQQD,QAAQ;AAAAmG,EAAA,GAARnG,QAAQ;AAmQjB,eAAeA,QAAQ;AAAC,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}