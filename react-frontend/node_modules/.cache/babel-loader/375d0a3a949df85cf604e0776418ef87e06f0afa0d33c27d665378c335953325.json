{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tadiwa.muguta\\\\Desktop\\\\Projects\\\\Finance Management\\\\financial_management_app\\\\react-frontend\\\\src\\\\Components\\\\Expenses.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Sidebar from \"./Sidebar\";\nimport TopNav from \"./TopNav\";\nimport AddExpenseModal from \"./AddExpenseModal\";\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport '../Styling/Expenses.css';\n\n// Register necessary chart components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction Expenses({\n  setIsAuthenticated\n}) {\n  _s();\n  const [expenses, setExpenses] = useState([]); // State to hold fetched expense data\n  const [userId, setUserId] = useState(null); // State to hold logged-in user ID\n  const [isModalOpen, setIsModalOpen] = useState(false); // State to control modal visibility\n  const [selectedExpenses, setSelectedExpenses] = useState([]); // State to hold selected expense IDs\n  const [editingExpense, setEditingExpense] = useState(null); // State to hold expense data for editing\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false); // State to control the success message visibility\n  const [windowWidth, setWindowWidth] = React.useState(window.innerWidth);\n  const [expandedMonths, setExpandedMonths] = useState({}); // Track expanded/collapsed months\n\n  // Fetch user ID from localStorage when the component mounts\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('id'); // Assuming userId is stored in localStorage\n    if (storedUserId) {\n      setUserId(parseInt(storedUserId, 10)); // Convert userId to an integer\n    }\n  }, []);\n\n  // Fetch expense data for the logged-in user when userId is available\n  useEffect(() => {\n    if (userId) {\n      const fetchExpenses = async () => {\n        try {\n          const response = await axios.get(`http://localhost:8080/expenses/user/${userId}`);\n          setExpenses(response.data); // Store user-specific expense data in state\n        } catch (error) {\n          console.error('Error fetching expenses: ', error);\n        }\n      };\n      fetchExpenses();\n    }\n  }, [userId]); // Dependency on userId, fetch data once it's available\n\n  // Sort expenses by date in descending order (most recent first)\n  const sortedExpenses = [...expenses].sort((a, b) => new Date(b.date) - new Date(a.date));\n\n  // Group exoenses by month and year\n  const groupedExpenses = sortedExpenses.reduce((groups, expense) => {\n    const date = new Date(expense.date);\n    const monthYear = `${date.toLocaleString('default', {\n      month: 'long'\n    })} ${date.getFullYear()}`;\n    if (!groups[monthYear]) {\n      groups[monthYear] = [];\n    }\n    groups[monthYear].push(expense);\n    return groups;\n  }, {});\n\n  // Calculate total expense for each month\n  const monthlyTotals = Object.keys(groupedExpenses).map(monthYear => {\n    const total = groupedExpenses[monthYear].reduce((sum, expense) => sum + expense.amount, 0);\n    return {\n      monthYear,\n      total\n    };\n  });\n\n  // Sort monthlyTotals by date in ascending order\n  monthlyTotals.sort((a, b) => new Date(a.monthYear) - new Date(b.monthYear));\n  const chartData = {\n    labels: monthlyTotals.map(item => item.monthYear),\n    datasets: [{\n      label: 'Total Expense',\n      data: monthlyTotals.map(item => item.total),\n      backgroundColor: '#fff',\n      borderColor: 'black',\n      borderWidth: 1\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Total Expenses per Month'\n      }\n    }\n  };\n\n  // Handle expanding/collapsing month sections\n  const toggleMonth = monthYear => {\n    setExpandedMonths(prevState => ({\n      ...prevState,\n      [monthYear]: !prevState[monthYear]\n    }));\n  };\n\n  // Function to handle adding expense\n  const handleAddExpense = async newExpense => {\n    try {\n      const response = await axios.post('http://localhost:8080/expenses', {\n        ...newExpense,\n        user: {\n          id: userId\n        } // Include user ID in the request\n      });\n      console.log(response.data); // Log the response (optional)\n      setExpenses(prevExpenses => [...prevExpenses, newExpense]); // Update the state\n    } catch (error) {\n      if (error.response) {\n        throw error.response.data; // Return server validation error\n      } else {\n        // eslint-disable-next-line\n        throw 'An error occurred while creating expense.';\n      }\n    }\n  };\n\n  // Handle edit expense\n  const handleEditExpense = async editedExpense => {\n    try {\n      const response = await axios.put(`http://localhost:8080/expenses/${editingExpense.id}`, {\n        ...editedExpense,\n        user: {\n          id: userId\n        }\n      });\n      // Update the state with the updated expense\n      setExpenses(prevExpenses => prevExpenses.map(rev => rev.id === editingExpense.id ? response.data : rev));\n      setEditingExpense(null); // Reset editing expense\n    } catch (error) {\n      if (error.response) {\n        throw error.response.data; // Return server validation error\n      } else {\n        // eslint-disable-next-line\n        throw 'An error occurred while creating expense.';\n      }\n    }\n  };\n\n  // Handle checkbox toggle\n  const handleCheckboxChange = expenseId => {\n    setSelectedExpenses(prevSelected => {\n      if (prevSelected.includes(expenseId)) {\n        // Remove the expenseId if already selected\n        return prevSelected.filter(id => id !== expenseId);\n      } else {\n        // Add the expenseId to the selected array\n        return [...prevSelected, expenseId];\n      }\n    });\n  };\n\n  // Open the modal to add new expense (ensure fields are reset)\n  const handleAddClick = () => {\n    setEditingExpense(null); // Reset editingExpense to ensure the form is empty\n    setIsModalOpen(true); // Open the modal\n  };\n\n  // Open the modal to edit the selected expense\n  const handleEditClick = () => {\n    const expenseToEdit = expenses.find(expense => expense.id === selectedExpenses[0]);\n    setEditingExpense(expenseToEdit); // Set the expense to be edited\n    setIsModalOpen(true); // Open the modal\n  };\n\n  // Function to handle removing selected expenses\n  const handleRemoveSelected = async () => {\n    try {\n      // Loop through selected expenses and send a DELETE request for each\n      await Promise.all(selectedExpenses.map(async id => {\n        await axios.delete(`http://localhost:8080/expenses/${id}`);\n      }));\n      console.log(\"Successfully deleted the selected expense transactions\");\n\n      // After successful deletion, update the state to remove the deleted expenses\n      setExpenses(prevExpenses => prevExpenses.filter(expense => !selectedExpenses.includes(expense.id)));\n      setSelectedExpenses([]); // Clear the selected expenses after deletion\n\n      // Show success message and auto-hide after 3 seconds\n      setShowSuccessMessage(true);\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n      }, 3000); // Hide message after 3 seconds\n    } catch (error) {\n      console.error('Error deleting expenses:', error);\n    }\n  };\n\n  // Modify the onClose function to unselect the selected expense\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingExpense(null);\n    setSelectedExpenses([]); // Unselect any selected expenses\n  };\n  React.useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expensesContainer\",\n    children: [windowWidth > 650 ? /*#__PURE__*/_jsxDEV(Sidebar, {\n      setIsAuthenticated: setIsAuthenticated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 34\n    }, this) : /*#__PURE__*/_jsxDEV(TopNav, {\n      setIsAuthenticated: setIsAuthenticated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 88\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expensesContent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Expenses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), Object.keys(groupedExpenses).map(monthYear => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"monthSection\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"monthHeader\",\n          onClick: () => toggleMonth(monthYear),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: monthYear\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: expandedMonths[monthYear] ? 'Collapse' : 'Expand'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this), expandedMonths[monthYear] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `tableContainer ${windowWidth <= 650 ? 'scrollableTable' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"expensesTable\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Recurring\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: groupedExpenses[monthYear].map(expense => /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: selectedExpenses.includes(expense.id) ? 'selectedRow' : '',\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    width: '5%'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: selectedExpenses.includes(expense.id),\n                    onChange: () => handleCheckboxChange(expense.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    width: '10%'\n                  },\n                  children: [\"R\", expense.amount.toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    width: '20%'\n                  },\n                  children: expense.category\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    width: '50%'\n                  },\n                  children: expense.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    width: '5%'\n                  },\n                  children: expense.isRecurring ? 'Yes' : 'No'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    width: '10%'\n                  },\n                  children: new Date(expense.date).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 49\n                }, this)]\n              }, expense.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 29\n        }, this)]\n      }, monthYear, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this)), showSuccessMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"successMessage\",\n        children: \"Successfully deleted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expenseButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"addExpenseButton\",\n          onClick: handleAddClick,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-plus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }, this), \" Add\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `removeExpenseButton ${selectedExpenses.length === 0 ? 'disabledButton' : ''}`,\n          disabled: selectedExpenses.length === 0 // Disable if no expense is selected\n          ,\n          onClick: handleRemoveSelected // Call the remove function\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-trash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 25\n          }, this), \" Remove\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `editExpenseButton ${selectedExpenses.length !== 1 ? 'disabledButton' : ''}`,\n          disabled: selectedExpenses.length !== 1 // Disable if no expense is selected\n          ,\n          onClick: handleEditClick,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-pencil\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), \" Edit\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddExpenseModal, {\n        isOpen: isModalOpen,\n        onClose: handleCloseModal,\n        onAddExpense: editingExpense ? handleEditExpense : handleAddExpense,\n        editingExpense: editingExpense // Pass selected expense for editing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expenseChart\",\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData,\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 9\n  }, this);\n}\n_s(Expenses, \"Bm8IU2hmgrW4GDpmKlLdRXGCCBA=\");\n_c = Expenses;\nexport default Expenses;\nvar _c;\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["React","useEffect","useState","axios","Sidebar","TopNav","AddExpenseModal","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Expenses","setIsAuthenticated","_s","expenses","setExpenses","userId","setUserId","isModalOpen","setIsModalOpen","selectedExpenses","setSelectedExpenses","editingExpense","setEditingExpense","showSuccessMessage","setShowSuccessMessage","windowWidth","setWindowWidth","window","innerWidth","expandedMonths","setExpandedMonths","storedUserId","localStorage","getItem","parseInt","fetchExpenses","response","get","data","error","console","sortedExpenses","sort","a","b","Date","date","groupedExpenses","reduce","groups","expense","monthYear","toLocaleString","month","getFullYear","push","monthlyTotals","Object","keys","map","total","sum","amount","chartData","labels","item","datasets","label","backgroundColor","borderColor","borderWidth","chartOptions","responsive","plugins","legend","position","title","display","text","toggleMonth","prevState","handleAddExpense","newExpense","post","user","id","log","prevExpenses","handleEditExpense","editedExpense","put","rev","handleCheckboxChange","expenseId","prevSelected","includes","filter","handleAddClick","handleEditClick","expenseToEdit","find","handleRemoveSelected","Promise","all","delete","setTimeout","handleCloseModal","handleResize","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","width","type","checked","onChange","toFixed","category","description","isRecurring","toLocaleDateString","length","disabled","isOpen","onClose","onAddExpense","options","_c","$RefreshReg$"],"sources":["C:/Users/tadiwa.muguta/Desktop/Projects/Finance Management/financial_management_app/react-frontend/src/Components/Expenses.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport TopNav from \"./TopNav\";\r\nimport AddExpenseModal from \"./AddExpenseModal\";\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport '../Styling/Expenses.css';\r\n\r\n// Register necessary chart components\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nfunction Expenses({ setIsAuthenticated }) {\r\n    const [expenses, setExpenses] = useState([]); // State to hold fetched expense data\r\n    const [userId, setUserId] = useState(null); // State to hold logged-in user ID\r\n    const [isModalOpen, setIsModalOpen] = useState(false); // State to control modal visibility\r\n    const [selectedExpenses, setSelectedExpenses] = useState([]); // State to hold selected expense IDs\r\n    const [editingExpense, setEditingExpense] = useState(null); // State to hold expense data for editing\r\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false); // State to control the success message visibility\r\n    const [windowWidth, setWindowWidth] = React.useState(window.innerWidth);\r\n    const [expandedMonths, setExpandedMonths] = useState({}); // Track expanded/collapsed months\r\n\r\n    // Fetch user ID from localStorage when the component mounts\r\n    useEffect(() => {\r\n        const storedUserId = localStorage.getItem('id'); // Assuming userId is stored in localStorage\r\n        if (storedUserId) {\r\n            setUserId(parseInt(storedUserId, 10)); // Convert userId to an integer\r\n        }\r\n    }, []);\r\n\r\n    // Fetch expense data for the logged-in user when userId is available\r\n    useEffect(() => {\r\n        if (userId) {\r\n            const fetchExpenses = async () => {\r\n                try {\r\n                    const response = await axios.get(`http://localhost:8080/expenses/user/${userId}`);\r\n                    setExpenses(response.data); // Store user-specific expense data in state\r\n                } catch (error) {\r\n                    console.error('Error fetching expenses: ', error);\r\n                }\r\n            };\r\n\r\n            fetchExpenses();\r\n        }\r\n    }, [userId]); // Dependency on userId, fetch data once it's available\r\n\r\n    // Sort expenses by date in descending order (most recent first)\r\n    const sortedExpenses = [...expenses].sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n    // Group exoenses by month and year\r\n    const groupedExpenses = sortedExpenses.reduce((groups, expense) => {\r\n        const date = new Date(expense.date);\r\n        const monthYear = `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`;\r\n        if (!groups[monthYear]) {\r\n            groups[monthYear] = [];\r\n        }\r\n        groups[monthYear].push(expense);\r\n        return groups;\r\n    }, {});\r\n\r\n    // Calculate total expense for each month\r\n    const monthlyTotals = Object.keys(groupedExpenses).map((monthYear) => {\r\n        const total = groupedExpenses[monthYear].reduce((sum, expense) => sum + expense.amount, 0);\r\n        return { monthYear, total };\r\n    });\r\n\r\n    // Sort monthlyTotals by date in ascending order\r\n    monthlyTotals.sort((a, b) => new Date(a.monthYear) - new Date(b.monthYear));\r\n\r\n    const chartData = {\r\n        labels: monthlyTotals.map(item => item.monthYear),\r\n        datasets: [\r\n            {\r\n                label: 'Total Expense',\r\n                data: monthlyTotals.map(item => item.total),\r\n                backgroundColor: '#fff',\r\n                borderColor: 'black',\r\n                borderWidth: 1\r\n            }\r\n        ]\r\n    };\r\n    \r\n    const chartOptions = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: { position: 'top' },\r\n            title: { display: true, text: 'Total Expenses per Month' }\r\n        }\r\n    };\r\n\r\n    // Handle expanding/collapsing month sections\r\n    const toggleMonth = (monthYear) => {\r\n        setExpandedMonths((prevState) => ({\r\n            ...prevState,\r\n            [monthYear]: !prevState[monthYear],\r\n        }));\r\n    };\r\n\r\n    // Function to handle adding expense\r\n    const handleAddExpense = async (newExpense) => {\r\n        try {\r\n            const response = await axios.post('http://localhost:8080/expenses', {\r\n                ...newExpense,\r\n                user: { id: userId } // Include user ID in the request\r\n            });\r\n            console.log(response.data); // Log the response (optional)\r\n            setExpenses((prevExpenses) => [...prevExpenses, newExpense]); // Update the state\r\n        } catch (error) {\r\n            if (error.response) {\r\n                throw error.response.data;  // Return server validation error\r\n            } else {\r\n                // eslint-disable-next-line\r\n                throw 'An error occurred while creating expense.';\r\n            }\r\n        }\r\n    };\r\n\r\n    // Handle edit expense\r\n    const handleEditExpense = async (editedExpense) => {\r\n        try {\r\n            const response = await axios.put(`http://localhost:8080/expenses/${editingExpense.id}`, {\r\n                ...editedExpense,\r\n                user: { id: userId }\r\n            });\r\n            // Update the state with the updated expense\r\n            setExpenses((prevExpenses) => \r\n                prevExpenses.map(rev => rev.id === editingExpense.id ? response.data : rev)\r\n            );\r\n            setEditingExpense(null); // Reset editing expense\r\n        } catch (error) {\r\n            if (error.response) {\r\n                throw error.response.data;  // Return server validation error\r\n            } else {\r\n                // eslint-disable-next-line\r\n                throw 'An error occurred while creating expense.';\r\n            }\r\n        }\r\n    };\r\n\r\n    // Handle checkbox toggle\r\n    const handleCheckboxChange = (expenseId) => {\r\n        setSelectedExpenses((prevSelected) => {\r\n            if (prevSelected.includes(expenseId)) {\r\n                // Remove the expenseId if already selected\r\n                return prevSelected.filter(id => id !== expenseId);\r\n            } else {\r\n                // Add the expenseId to the selected array\r\n                return [...prevSelected, expenseId];\r\n            }\r\n        });\r\n    };\r\n\r\n    // Open the modal to add new expense (ensure fields are reset)\r\n    const handleAddClick = () => {\r\n        setEditingExpense(null); // Reset editingExpense to ensure the form is empty\r\n        setIsModalOpen(true); // Open the modal\r\n    };\r\n\r\n    // Open the modal to edit the selected expense\r\n    const handleEditClick = () => {\r\n        const expenseToEdit = expenses.find(expense => expense.id === selectedExpenses[0]);\r\n        setEditingExpense(expenseToEdit); // Set the expense to be edited\r\n        setIsModalOpen(true); // Open the modal\r\n    };\r\n\r\n    // Function to handle removing selected expenses\r\n    const handleRemoveSelected = async () => {\r\n        try {\r\n            // Loop through selected expenses and send a DELETE request for each\r\n            await Promise.all(\r\n                selectedExpenses.map(async (id) => {\r\n                    await axios.delete(`http://localhost:8080/expenses/${id}`);\r\n                })\r\n            );\r\n\r\n            console.log(\"Successfully deleted the selected expense transactions\");\r\n\r\n            // After successful deletion, update the state to remove the deleted expenses\r\n            setExpenses((prevExpenses) =>\r\n                prevExpenses.filter((expense) => !selectedExpenses.includes(expense.id))\r\n            );\r\n            setSelectedExpenses([]); // Clear the selected expenses after deletion\r\n\r\n            // Show success message and auto-hide after 3 seconds\r\n            setShowSuccessMessage(true);\r\n            setTimeout(() => {\r\n                setShowSuccessMessage(false);\r\n            }, 3000); // Hide message after 3 seconds\r\n\r\n        } catch (error) {\r\n            console.error('Error deleting expenses:', error);\r\n        }\r\n    };\r\n\r\n    // Modify the onClose function to unselect the selected expense\r\n    const handleCloseModal = () => {\r\n        setIsModalOpen(false);\r\n        setEditingExpense(null);\r\n        setSelectedExpenses([]); // Unselect any selected expenses\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowWidth(window.innerWidth);\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"expensesContainer\">\r\n            {/* Conditional rendering of Sidebar or TopNav */}\r\n            {windowWidth > 650 ? <Sidebar setIsAuthenticated={setIsAuthenticated} /> : <TopNav setIsAuthenticated={setIsAuthenticated} />}\r\n\r\n            {/* Right Content Area */}\r\n            <div className=\"expensesContent\">\r\n                <h2>Expenses</h2>\r\n                \r\n                {/* Loop through grouped expenses by month */}\r\n                {Object.keys(groupedExpenses).map((monthYear) => (\r\n                    <div key={monthYear} className=\"monthSection\">\r\n                        {/* Collapsible header */}\r\n                        <div className=\"monthHeader\" onClick={() => toggleMonth(monthYear)}>\r\n                            <h3>{monthYear}</h3>\r\n                            <button>\r\n                                {expandedMonths[monthYear] ? 'Collapse' : 'Expand'}\r\n                            </button>\r\n                        </div>\r\n\r\n                        {/* Collapsible content */}\r\n                        {expandedMonths[monthYear] && (\r\n                            <div className={`tableContainer ${windowWidth <= 650 ? 'scrollableTable' : ''}`}>\r\n                                <table className=\"expensesTable\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Select</th>\r\n                                            <th>Amount</th>\r\n                                            <th>Category</th>\r\n                                            <th>Description</th>\r\n                                            <th>Recurring</th>\r\n                                            <th>Date</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {groupedExpenses[monthYear].map((expense) => (\r\n                                            <tr key={expense.id} className={selectedExpenses.includes(expense.id) ? 'selectedRow' : ''}>\r\n                                                <td style={{ width: '5%' }}>\r\n                                                    <input \r\n                                                        type=\"checkbox\" \r\n                                                        checked={selectedExpenses.includes(expense.id)} \r\n                                                        onChange={() => handleCheckboxChange(expense.id)} \r\n                                                    />\r\n                                                </td>\r\n                                                <td style={{ width: '10%' }}>R{expense.amount.toFixed(2)}</td>\r\n                                                <td style={{ width: '20%' }}>{expense.category}</td>\r\n                                                <td style={{ width: '50%' }}>{expense.description}</td>\r\n                                                <td style={{ width: '5%' }}>{expense.isRecurring ? 'Yes' : 'No'}</td>\r\n                                                <td style={{ width: '10%' }}>{new Date(expense.date).toLocaleDateString()}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n\r\n                {/* Success message */}\r\n                {showSuccessMessage && (\r\n                    <div className=\"successMessage\">\r\n                        Successfully deleted\r\n                    </div>\r\n                )}\r\n\r\n                {/* Buttons Section */}\r\n                <div className=\"expenseButtons\">\r\n                    <button className=\"addExpenseButton\" onClick={handleAddClick}>\r\n                        <i className=\"fa fa-plus\"></i> Add\r\n                    </button>\r\n                    <button \r\n                        className={`removeExpenseButton ${selectedExpenses.length === 0 ? 'disabledButton' : ''}`} \r\n                        disabled={selectedExpenses.length === 0} // Disable if no expense is selected\r\n                        onClick={handleRemoveSelected} // Call the remove function\r\n                    >\r\n                        <i className=\"fa fa-trash\"></i> Remove\r\n                    </button>\r\n                    <button \r\n                        className={`editExpenseButton ${selectedExpenses.length !== 1 ? 'disabledButton' : ''}`} \r\n                        disabled={selectedExpenses.length !== 1} // Disable if no expense is selected\r\n                        onClick={handleEditClick}\r\n                    >\r\n                        <i className=\"fa fa-pencil\"></i> Edit\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Add Expense Modal */}\r\n                <AddExpenseModal \r\n                    isOpen={isModalOpen} \r\n                    onClose={handleCloseModal} \r\n                    onAddExpense={editingExpense ? handleEditExpense : handleAddExpense}\r\n                    editingExpense={editingExpense} // Pass selected expense for editing\r\n                />\r\n\r\n                {/* Bar Chart Section */}\r\n                <div className=\"expenseChart\">\r\n                    <Bar data={chartData} options={chartOptions} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Expenses;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}